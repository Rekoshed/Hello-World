
	-----------РЕПОЗИТОРИЙ-------------


 ------------ памятка часто встречаемых команд

$ git push # Отправить изменения

$ git pull # Получить изменения

$ git add . # индексировать все файлы репозитория

 ---------------------------

# Команда инициализации репозитория
		$ git init
# команда инициализации центрального репозитория
		$ git init --bare

# Проверка работоспособности репозитория
		$ git status

# клонируем репозиторий
		$ git clone [путь: центральный репозиторий] [путь: клон]  
		пример: '$ git clone ~/example_bare clone_of_example'

# Смотрим связь клона с репозиторием:
		$ git remote -v
		'origin  /home/user/example_bare (fetch)'
		'origin  /home/user/example_bare (push)'
# То же самое через чтение конфига
		$ cat .git/config
'		[remote "origin"]'
'		    url = /home/user/example_bare'
'		    fetch = +refs/heads/*:refs/remotes/origin/*'

	-----------------------


	---------КОММИТ--------
# Создаём файл
	$ touch README.md
# Меняем содержимое
	$ echo '# Hi' > README.md
# Так Git увидит новый файл
	$ git add README.md
 # Коммит с сообщением 'init project'
	$ git commit -m 'init projecT'
	----------------------
# Посмотреть историю коммитов
		$ git log

# Зная идентификатор коммита можно посмотреть изменения в коде.
		$ git show 3a64fccf14725593b7486ff09d6a6c325a5f8fcc
команда 'git diff', запущенная без аргументов, показывает различия между репозиторием и вашей рабочей копией 

' .gitignore' - этот файл поможет Git определить то, что точно не придётся коммитить.

$ git reset path/to/file     # сброс git add
$ git checkout path/to/file  # сброс git commit. т.е. откат свежих изменений.

# После этой команды, в рабочей копии окажется то состояние репозитория, которое было на момент коммита идентификатор.
$ git checkout [идентификатор] 

	--------ВЕТВЛЕНИЕ---------
$ git branch # смотрим название текущей ветки
$ git branch new-feature # создание новой ветки. new-feature - это название новой ветки
$ git checkout new-feature # переключение на новую ветку
$ git checkout ed8145e # переключились на необходимый коммит
$ git status #     проверили текущее  состояние
HEAD detached at ed8145e # HEAD -это голова от которой растёт новая ветка
	----------------------------

	----------ОТПРАВИТЬ ПОЛУЧИТЬ ИЗМЕНЕНИЯ-------
$ git push origin master # Отправка. orign - имя удалённого репозитория, maser -ветка
		Отслеживаемая ветка устанавливается командой 'git push --set-upstream origin master.' Эта команда выполняет два действия: устанавливает отслеживание и отправляет изменения. Она выполняется ровно один раз, далее можно отправлять изменения набирая просто 'git push'. Информация об отслеживаемой ветки описывается в файле '.git/config' в виде секций '[branch "имя ветки"]:'

$ git pull # получить изменения
	-----------------------------
	
	----------Моя первая отправка на GitHub -----------------
	rekoshed@rekoshed-RV408-RV508:~/Github/repositori/Hello-World$ git push --set-upstream origin master
	
Username for 'https://github.com': rekoshed@yandex.ru
Password for 'https://rekoshed@yandex.ru@github.com': 
Подсчет объектов: 3, готово.
Delta compression using up to 2 threads.
Сжатие объектов: 100% (3/3), готово.
Запись объектов: 100% (3/3), 1.80 KiB | 1.80 MiB/s, готово.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/Rekoshed/Hello-World.git
   5aa8707..a09e66d  master -> master
Ветка «master» отслеживает внешнюю ветку «master» из «orig
	---------------------------------------------------------


------------------- УСТАНОВКА И НАСТРОЙКА GIT --------------------

https://git-scm.com/book/ru/v1/Введение-Установка-Git # ссылка на официальный сайт установки

	Если у вас Fedora, можно воспользоваться yum'ом:
  $ yum install git-core
	
	Если же у вас дистрибутив, основанный на Debian, например, Ubuntu, попробуйте apt-get:
  $ apt-get install git

  -----------Имя пользователя
 — указать ваше имя и адрес электронной почты. 
Это важно, каждый содержит эту информацию, и она не может быть далее изменена:

$ git config --global user.name "rekoshed"
$ git config --global user.email rekoshed@yandex.ru
	если указана опция --global, то эти настройки достаточно сделать только один раз.
        или без параметра --global в каталоге с нужным проектом.

$ git config --global core.editor emacs # выбор редактора для сообщений в git
$ git config --global merge.tool vimdiff # выбор дифф утилиты для решения проблем слияния
$ git config --list # проверка настроек

 --------------------------------- КЛЮЧ SSH ---------------------
~/.ssh/ id_rsa.pub #  файл с расположением ключа. Текст файла копируем в кейс

$ ssh-keygen -t rsa -b 4096 -C "rekoshed@yandex.ru" # создание нового ключа
$ eval "$(ssh-agent -s)" # запускаем агент в фоновом режиме
> Agent pid 59566
$ ssh-add ~/.ssh/id_rsa # Добавляем закрытый ключ SSH в ssh-агент. 
	Если вы создали ключ с другим именем или добавляете существующий ключ с другим именем, 
	замените id_rsa в команде именем файла закрытого ключа.

https://github.com/settings/keys # путь к кейсу.Это в настройках профиля Github. В titl пишем любое название,
 в кейст всталяем текст файла id_rsa.pub
-----------------------------------------------------------------
